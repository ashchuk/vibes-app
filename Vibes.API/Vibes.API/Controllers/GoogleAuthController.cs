using Microsoft.AspNetCore.Mvc;
using Telegram.Bot;
using Telegram.Bot.Types.ReplyMarkups;
using Vibes.API.Services;

namespace Vibes.API.Controllers;

[ApiController]
[Route("/api/google-auth")]
public class GoogleAuthController(
    ICalendarService calendarService,
    IDatabaseService databaseService,
    ITelegramBotClient botClient,
    ILogger<GoogleAuthController> logger) : ControllerBase
{

    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é, –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URI
    private string GetCallbackUrl() => Url.Action(nameof(Callback), "GoogleAuth", null, Request.Scheme)!;


    [HttpGet("callback")]
    public async Task<IActionResult> Callback([FromQuery] string code, [FromQuery] string state)
    {
        if (string.IsNullOrEmpty(code) || !long.TryParse(state, out var telegramUserId))
        {
            logger.LogError("–ù–µ–≤–µ—Ä–Ω—ã–π callback –æ—Ç Google. Code: {Code}, State: {State}", code, state);
            return BadRequest("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
        }

        // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        var user = await databaseService.GetOrCreateUserAsync(new()
        {
            Id = telegramUserId
        });
        if (user == null)
        {
            return NotFound("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        // –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        await calendarService.HandleAuthCallback(user, code);
        await databaseService.UpdateUserAsync(user);
        logger.LogInformation("–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.", user.Id);

        try
        {
            var successText = "–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à Google Calendar —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! üéâ\n\n" +
                              "–¢–µ–ø–µ—Ä—å —è –º–æ–≥—É –≤–∏–¥–µ—Ç—å –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.\n\n" +
                              "–•–æ—Ç–∏—Ç–µ, —è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å **–ø—Ä–æ–≤–µ—Ä—é –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å** –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ **—Å–æ—Å—Ç–∞–≤–ª—é –ø–ª–∞–Ω** –Ω–∞ –∑–∞–≤—Ç—Ä–∞?";

            var inlineKeyboard = new InlineKeyboardMarkup(new[]
            {
                // –≠—Ç–∏ callbackData –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã –Ω–∞—à–∏–º OnCallbackQuery –∏ –∑–∞–ø—É—Å—Ç—è—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
                InlineKeyboardButton.WithCallbackData("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "command_check_calendar"),
                InlineKeyboardButton.WithCallbackData("üìù –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω", "command_plan")
            });

            await botClient.SendMessage(
                chatId: telegramUserId,
                text: successText,
                replyMarkup: inlineKeyboard,
                cancellationToken: CancellationToken.None
            );
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–± —É—Å–ø–µ—Ö–µ
        var htmlContent = """
                <!DOCTYPE html>
                <html lang="ru">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>–£—Å–ø–µ—à–Ω–æ!</title>
                    <style>
                        body {
                            margin: 0;
                            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
                            background-color: #f0f2f5;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            height: 100vh;
                            color: #1c1e21;
                        }
                        .card {
                            background-color: #ffffff;
                            border-radius: 12px;
                            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
                            text-align: center;
                            padding: 40px 30px;
                            max-width: 400px;
                            width: 90%;
                            transform: scale(0.95);
                            opacity: 0;
                            animation: fadeInScale 0.5s forwards ease-out;
                        }
                        .icon {
                            width: 72px;
                            height: 72px;
                            margin-bottom: 20px;
                        }
                        h1 {
                            font-size: 24px;
                            font-weight: 600;
                            margin: 0 0 10px 0;
                        }
                        p {
                            font-size: 16px;
                            color: #606770;
                            line-height: 1.5;
                        }
                        @keyframes fadeInScale {
                            to {
                                transform: scale(1);
                                opacity: 1;
                            }
                        }
                    </style>
                </head>
                <body>
                    <div class="card">
                        <!-- SVG –∏–∫–æ–Ω–∫–∞ –∑–µ–ª–µ–Ω–æ–π –≥–∞–ª–æ—á–∫–∏ -->
                        <svg class="icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path fill="#34c759" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                        
                        <h1>–û—Ç–ª–∏—á–Ω–æ!</h1>
                        <p>–í–∞—à Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ú–æ–∂–µ—Ç–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ Telegram.</p>
                    </div>
                </body>
                </html>
        """;

        return new ContentResult
        {
            Content = htmlContent,
            ContentType = "text/html; charset=utf-8",
            StatusCode = 200
        };
    }
}