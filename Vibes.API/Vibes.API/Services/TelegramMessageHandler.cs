using System.Text.Json;
using Microsoft.Extensions.Options;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Vibes.API.Configuration;
using Vibes.API.Models;

namespace Vibes.API.Services;

public class TelegramMessageHandler(
    ILogger<TelegramMessageHandler> logger,
    ITelegramBotClient botClient,
    ICalendarService calendarService,
    ILlmService llmService,
    IDatabaseService databaseService,
    IOptions<GoogleCalendarConfiguration> googleCalendarConfiguration)
    : IUpdateHandler
{
    public async Task HandleUpdateAsync(
        ITelegramBotClient _,
        Update update,
        CancellationToken cancellationToken)
    {
        var handler = update switch
        {
            { CallbackQuery: { } callbackQuery } => OnCallbackQuery(callbackQuery, cancellationToken),
            { Message: { } message } => OnMessage(message, cancellationToken),
            _ => UnknownUpdateHandlerAsync(update)
        };
        await handler;
    }

    private async Task OnCallbackQuery(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        if (callbackQuery.From is null || callbackQuery.Data is null || callbackQuery.Message is null) return;

        var user = await databaseService.GetOrCreateUserAsync(callbackQuery.From);

        // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        await botClient.EditMessageReplyMarkup(
            chatId: callbackQuery.Message.Chat.Id,
            messageId: callbackQuery.Message.MessageId,
            replyMarkup: null,
            cancellationToken: cancellationToken);

        var task = callbackQuery.Data switch
        {
            // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–û–ö –û–ù–ë–û–†–î–ò–ù–ì–ê ---
            "onboarding_start" when user.State == ConversationState.OnboardingAwaitingStart
                => HandleOnboardingStart(user, callbackQuery.From.Id, cancellationToken),

            // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–û–ö –û–¶–ï–ù–ö–ò –≠–ù–ï–†–ì–ò–ò ---
            var data when data.StartsWith("energy_rating_")
                => HandleEnergyRatingCallback(user, callbackQuery, cancellationToken),

            // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò –ü–†–ò–ù–Ø–¢–¨ –ü–õ–ê–ù ---
            "plan_accept" => HandlePlanAccept(user, callbackQuery.Message.Chat.Id, callbackQuery.Message, cancellationToken),

            // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò –ò–ó–ú–ï–ù–ò–¢–¨ –ü–õ–ê–ù ---
            "plan_edit" => HandlePlanEdit(user, callbackQuery.Message.Chat.Id, cancellationToken),

            var data when data.StartsWith("rate_event_")
                => HandleEventRatingCallback(user, callbackQuery, cancellationToken),

            _ => botClient.AnswerCallbackQuery(callbackQuery.Id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", cancellationToken: cancellationToken)
        };
        await task;
    }

    private async Task HandleEventRatingCallback(VibesUser user, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        // 1. –ü–∞—Ä—Å–∏–º callbackData
        var parts = callbackQuery.Data!.Split('_');
        var eventId = parts[2];
        var vibeTypeStr = parts[3];

        // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        var eventsToRate = JsonSerializer.Deserialize<Dictionary<string, string>>(user.ConversationContext ?? "{}")
                           ?? new Dictionary<string, string>();

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        var newRating = new EventRating
        {
            UserId = user.Id,
            GoogleEventId = eventId,
            EventSummary = eventsToRate.GetValueOrDefault(eventId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
            Vibe = Enum.Parse<VibeType>(vibeTypeStr, true),
            RatedAtUtc = DateTime.UtcNow
        };
        await databaseService.AddRecordAsync(newRating);

        // 4. –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ü–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞
        eventsToRate.Remove(eventId);

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ —Å–æ–±—ã—Ç–∏—è
        if (eventsToRate.Any())
        {
            // –ï—Å—Ç—å –µ—â–µ —Å–æ–±—ã—Ç–∏—è. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ.
            var nextEvent = eventsToRate.First();
            var nextEventId = nextEvent.Key;
            var nextEventSummary = nextEvent.Value;

            var keyboard = new InlineKeyboardMarkup(
                InlineKeyboardButton.WithCallbackData("‚ö°Ô∏è –ó–∞—Ä—è–∂–∞–µ—Ç", $"rate_event_{nextEventId}_Energize"),
                InlineKeyboardButton.WithCallbackData("üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", $"rate_event_{nextEventId}_Neutral"),
                InlineKeyboardButton.WithCallbackData("ü™´ –£—Ç–æ–º–ª—è–µ—Ç", $"rate_event_{nextEventId}_Drain")
            );

            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ —á–∞—Ç
            await botClient.EditMessageText(
                chatId: user.TelegramId,
                messageId: callbackQuery.Message.MessageId,
                text: $"–û—Ç–ª–∏—á–Ω–æ. –ê –∫–∞–∫ –Ω–∞—Å—á–µ—Ç \"{nextEventSummary}\"?",
                replyMarkup: keyboard,
                cancellationToken: cancellationToken
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è —Å–æ–±—ã—Ç–∏—è–º–∏
            user.ConversationContext = JsonSerializer.Serialize(eventsToRate);
            await databaseService.UpdateUserAsync(user);
        }
        else
        {
            // –°–æ–±—ã—Ç–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥.
            user.State = ConversationState.None;
            user.ConversationContext = null;
            await databaseService.UpdateUserAsync(user);

            await botClient.EditMessageText(
                chatId: user.TelegramId,
                messageId: callbackQuery.Message.MessageId,
                text: "–°–ø–∞—Å–∏–±–æ! –í—Å–µ –∏—Ç–æ–≥–∏ –¥–Ω—è –ø–æ–¥–≤–µ–¥–µ–Ω—ã. –û—Ç–ª–∏—á–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞!",
                replyMarkup: null, // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                cancellationToken: cancellationToken
            );
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞
    private async Task HandleOnboardingStart(VibesUser user, long chatId, CancellationToken cancellationToken)
    {
        user.State = ConversationState.OnboardingAwaitingTimezone;
        await databaseService.UpdateUserAsync(user);

        await botClient.SendMessage(
            chatId: chatId,
            text: "–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UTC+X (–Ω–∞–ø—Ä–∏–º–µ—Ä, UTC+3).",
            cancellationToken: cancellationToken);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
    private async Task HandleEnergyRatingCallback(VibesUser user, CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        var rating = callbackQuery.Data!.Split('_').LastOrDefault() ?? "unknown";
        logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –æ—Ü–µ–Ω–∏–ª —ç–Ω–µ—Ä–≥–∏—é –∫–∞–∫: {Rating}", user.Id, rating);

        // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–û–•–†–ê–ù–Ø–ï–ú –û–¶–ï–ù–ö–£ –í –ö–û–ù–¢–ï–ö–°–¢ ---
        var context = new MorningCheckupContext
        {
            EnergyRating = rating
        };
        user.ConversationContext = JsonSerializer.Serialize(context);

        await botClient.AnswerCallbackQuery(callbackQuery.Id, $"–ü—Ä–∏–Ω—è—Ç–æ: {rating}", cancellationToken: cancellationToken);

        user.State = ConversationState.AwaitingMorningSleepHours;
        await databaseService.UpdateUserAsync(user);

        await botClient.SendMessage(
            chatId: callbackQuery.From.Id,
            text: "–ü–æ–Ω—è–ª. –ê —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∞–ª(–∞) —Å–µ–≥–æ–¥–Ω—è?",
            cancellationToken: cancellationToken);
    }

    private async Task OnMessage(Message message, CancellationToken cancellationToken)
    {
        if (message.From is null) return;

        var user = await databaseService.GetOrCreateUserAsync(message.From);

        if (message.Text is { } messageText)
        {
            var command = messageText.Split(' ')[0];
            var task = command switch
            {
                "/start" => HandleStartCommand(user, message.Chat.Id, cancellationToken),
                "/plan" => HandlePlanCommand(user, message.Chat.Id, cancellationToken),
                "/energy" => HandleEnergyCommand(user, message.Chat.Id, cancellationToken),
                "/connect_calendar" => HandleConnectCalendarCommand(user, message.Chat.Id, cancellationToken),
                "/check_calendar" => HandleCheckCalendarCommand(user, message.Chat.Id, cancellationToken),
                _ => HandleConversation(user, message, cancellationToken)
            };
            await task;
        }
        else if (message.Photo is not null)
        {
            await HandlePhotoMessage(user, message, cancellationToken);
        }
        else
        {
            await botClient.SendMessage(chatId: message.Chat.Id, text: "–ò–∑–≤–∏–Ω–∏, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.", cancellationToken: cancellationToken);
        }
    }

    private async Task HandleStartCommand(VibesUser user, long chatId, CancellationToken cancellationToken)
    {
        user.State = ConversationState.OnboardingAwaitingStart;
        user.ConversationContext = null;
        await databaseService.UpdateUserAsync(user);

        var personalizedText = $"{user.FirstName ?? "–ü—Ä–∏–≤–µ—Ç"}! –Ø –ø–æ–º–æ–≥—É —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å —Ç–∞–∫, —á—Ç–æ–±—ã —ç–Ω–µ—Ä–≥–∏–∏ —Ö–≤–∞—Ç–∞–ª–æ –Ω–∞ –≤–∞–∂–Ω–æ–µ –∏ —Ç—ã –Ω–µ –≤—ã–≥–æ—Ä–∞–ª. –î–∞–≤–∞–π –∑–∞ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ —É–¥–æ–±–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.";

        var inlineKeyboard = new InlineKeyboardMarkup(InlineKeyboardButton.WithCallbackData("OK, –ø–æ–µ—Ö–∞–ª–∏", "onboarding_start"));

        await botClient.SendMessage(chatId: chatId, text: personalizedText, replyMarkup: inlineKeyboard, cancellationToken: cancellationToken);
    }

    private async Task HandleConversation(VibesUser user, Message message, CancellationToken cancellationToken)
    {
        if (message.Text is null) return; // –ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ

        switch (user.State)
        {
            // --- –°–¶–ï–ù–ê–†–ò–ô –û–ù–ë–û–†–î–ò–ù–ì–ê ---
            case ConversationState.OnboardingAwaitingTimezone:
                var timezone = message.Text;
                // TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–∞–π–º–∑–æ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–∞–π–º–∑–æ–Ω—É: {Timezone}", user.Id, timezone);

                user.State = ConversationState.AwaitingRetroSleepAndActivity; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É —Ä–µ—Ç—Ä–æ-–¥–∞–Ω–Ω—ã—Ö
                await databaseService.UpdateUserAsync(user);

                const string retroText = "–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å —Ç–≤–æ—é —Ç–∞–π–º–∑–æ–Ω—É.\n\n–•–æ—á–µ—à—å –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–Ω–µ –∏ —à–∞–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 2 –¥–Ω—è? –¢–æ–≥–¥–∞ —è —Å–º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ –∏–Ω—Å–∞–π—Ç—ã —É–∂–µ —Å–µ–π—á–∞—Å.\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–∑–∞–≤—á–µ—Ä–∞ —Å–ø–∞–ª 6—á, –ø—Ä–æ—à–µ–ª 5000 —à–∞–≥–æ–≤. –í—á–µ—Ä–∞ 8—á, 10000 —à–∞–≥–æ–≤'.";
                await botClient.SendMessage(message.Chat.Id, retroText, cancellationToken: cancellationToken);
                break;

            // --- –°–¶–ï–ù–ê–†–ò–ô –°–ë–û–†–ê –†–ï–¢–†–û-–î–ê–ù–ù–´–• (User Story #8) ---
            case ConversationState.AwaitingRetroSleepAndActivity:
                var retroData = message.Text;
                logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –ø—Ä–∏—Å–ª–∞–ª —Ä–µ—Ç—Ä–æ-–¥–∞–Ω–Ω—ã–µ: {RetroData}", user.Id, retroData);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ LlmService –∏ –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∏–Ω—Å–∞–π—Ç
                var insight = await llmService.GenerateRetroInsightAsync(retroData);

                if (insight.StartsWith("[ERROR]"))
                {
                    logger.LogWarning("LLM –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ç—Ä–æ-–∏–Ω—Å–∞–π—Ç–∞: {Error}", insight);
                    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –Ω–∞ –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
                    insight = "–°–ø–∞—Å–∏–±–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ. –ß—Ç–æ–±—ã —è –º–æ–≥ –¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã, –ø–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Å–æ–Ω –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∞—Ä—É –¥–Ω–µ–π.";

                    await botClient.SendMessage(message.Chat.Id, insight, cancellationToken: cancellationToken);
                    // –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                    break;
                }

                await botClient.SendMessage(message.Chat.Id, insight, cancellationToken: cancellationToken);

                user.State = ConversationState.None;
                user.IsOnboardingCompleted = true; // –§–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç —á—Ç–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–æ—à–µ–ª
                await databaseService.UpdateUserAsync(user);
                await HandlePlanCommand(user, message.Chat.Id, cancellationToken);
                break;

            // --- –°–¶–ï–ù–ê–†–ò–ô –£–¢–†–ï–ù–ù–ï–ì–û –ß–ï–ö–ê–ü–ê ---
            case ConversationState.AwaitingMorningSleepHours:
                var sleepHours = message.Text;
                logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} —Å–ø–∞–ª: {SleepHours}", user.Id, sleepHours);

                // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–ë–ù–û–í–õ–Ø–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –î–ê–ù–ù–´–ú–ò –û –°–ù–ï ---
                var contextN3 = JsonSerializer.Deserialize<MorningCheckupContext>(user.ConversationContext ?? "{}")
                                ?? new MorningCheckupContext();
                contextN3.SleepHours = sleepHours;
                user.ConversationContext = JsonSerializer.Serialize(contextN3);

                user.State = ConversationState.AwaitingMorningPlans;
                await databaseService.UpdateUserAsync(user);

                await botClient.SendMessage(message.Chat.Id, "–û—Ç–ª–∏—á–Ω–æ. –ß–µ–º —Å–µ–≥–æ–¥–Ω—è –∑–∞–π–º—ë–º—Å—è? –ù–∞–∑–æ–≤–∏ 1‚Äì3 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–ª–∞.", cancellationToken: cancellationToken);
                break;

            case ConversationState.AwaitingMorningPlans:
                var plans = message.Text;
                logger.LogInformation("–ü–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}: {Plans}", user.Id, plans);

                // --- –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ---

                // 1. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                var contextN4 = JsonSerializer.Deserialize<MorningCheckupContext>(user.ConversationContext ?? "{}")
                                ?? new MorningCheckupContext();

                // 2. –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                var morningPlancalendarEvents = await calendarService.GetUpcomingEvents(user, 5);

                // 3. –í—ã–∑—ã–≤–∞–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
                var generatedPlan = await llmService.GenerateMorningPlanAsync(
                    contextN4.EnergyRating ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                    contextN4.SleepHours ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                    plans,
                    morningPlancalendarEvents
                );

                if (generatedPlan.StartsWith("[ERROR]"))
                {
                    logger.LogWarning("LLM –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–ª–∞–Ω–∞: {Error}", generatedPlan);
                    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –Ω–∞ –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
                    generatedPlan = "–ü–æ—Ö–æ–∂–µ, –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å 1-3 –¥–µ–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.";

                    await botClient.SendMessage(message.Chat.Id, generatedPlan, cancellationToken: cancellationToken);
                    // –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                    break;
                }

                // 4. –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                user.State = ConversationState.None;
                user.ConversationContext = null; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                await databaseService.UpdateUserAsync(user);

                await SendFormattedMessageAsync(
                    message.Chat.Id,
                    generatedPlan,
                    replyMarkup: new InlineKeyboardMarkup(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("–ü—Ä–∏–Ω—è—Ç—å –ø–ª–∞–Ω üëç", "plan_accept"), InlineKeyboardButton.WithCallbackData("–ü—Ä–∞–≤–∏—Ç—å ‚úèÔ∏è", "plan_edit"),
                    }),
                    cancellationToken: cancellationToken);
                break;

            // --- –°–¶–ï–ù–ê–†–ò–ô –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ü–û –¢–ï–ö–°–¢–£ ---
            case ConversationState.AwaitingSchedulePhoto:
                var textSchedule = message.Text;
                logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –ø—Ä–∏—Å–ª–∞–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º: {TextSchedule}", user.Id, textSchedule);


                // 1. –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –º—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É
                await botClient.SendMessage(message.Chat.Id, "–ü—Ä–∏–Ω—è–ª! –°–≤–µ—Ä—è—é—Å—å —Å –≤–∞—à–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –∏ —Å–æ—Å—Ç–∞–≤–ª—è—é –ª—É—á—à–∏–π –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å. –°–µ–∫—É–Ω–¥—É...", cancellationToken: cancellationToken);

                // 2.1 –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                var scheduleCalendarEvents = await calendarService.GetUpcomingEvents(user);
                // 2.2 –ò–ó–í–õ–ï–ö–ê–ï–ú "–ü–ê–ú–Ø–¢–¨" –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•
                var recentPlans = await databaseService.GetRecentDailyPlansAsync(user.Id);
                var recentRatings = await databaseService.GetRecentEventRatingsAsync(user.Id);
                
                // 3. –í—ã–∑—ã–≤–∞–µ–º LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                var structuredPlan = await llmService.GeneratePlanFromTextAsync(
                    textSchedule,
                    scheduleCalendarEvents,
                    recentPlans,
                    recentRatings);

                if (structuredPlan.StartsWith("[ERROR]"))
                {
                    logger.LogWarning("LLM –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {Error}", structuredPlan);
                    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –Ω–∞ –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
                    structuredPlan = "–ü–æ—Ö–æ–∂–µ, –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å 1-3 –¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å.";

                    // –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å/–ü—Ä–∞–≤–∏—Ç—å" –Ω–µ –Ω—É–∂–Ω—ã
                    await botClient.SendMessage(message.Chat.Id, structuredPlan, cancellationToken: cancellationToken);
                    // –í–∞–∂–Ω–æ: –Ω–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                    break;
                }
                // --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–í–ï–¢–ê ---

                user.State = ConversationState.None;
                await databaseService.UpdateUserAsync(user);

                await SendFormattedMessageAsync(
                    message.Chat.Id,
                    structuredPlan,
                    replyMarkup: new InlineKeyboardMarkup(new[]
                    {
                        InlineKeyboardButton.WithCallbackData("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üëç", "plan_accept"), InlineKeyboardButton.WithCallbackData("–ò–∑–º–µ–Ω–∏—Ç—å ‚úèÔ∏è", "plan_edit"),
                    }),
                    cancellationToken);
                break;

            default:
                // –ï—Å–ª–∏ –º—ã –Ω–µ –æ–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª,
                // –≤–µ–∂–ª–∏–≤–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
                // –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∫–∞–∫–æ–≥–æ-—Ç–æ –¥–∏–∞–ª–æ–≥–∞,
                // –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
                await HandleDefaultMessageAsync(user, message, cancellationToken);
                break;
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞–Ω".
    /// </summary>
    private async Task HandlePlanAccept(VibesUser user, long chatId, Message message, CancellationToken cancellationToken)
    {
        logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–ª–∞–Ω.", user.Id);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫–Ω–æ–ø–∫–∏.
        var planText = message.Text;
        if (string.IsNullOrWhiteSpace(planText))
        {
            logger.LogWarning("–¢–µ–∫—Å—Ç –ø–ª–∞–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Å—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId}", user.Id);
            planText = "–ü–ª–∞–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.";
        }

        // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞–Ω–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.
        var newPlan = new DailyPlan
        {
            UserId = user.Id,
            PlanDate = DateOnly.FromDateTime(DateTime.UtcNow),
            PlanText = planText,
            CreatedUtc = DateTime.UtcNow
        };
        await databaseService.AddRecordAsync(newPlan);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
        await botClient.SendMessage(
            chatId: chatId,
            text: "–û—Ç–ª–∏—á–Ω–æ! –ü–ª–∞–Ω –ø—Ä–∏–Ω—è—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –Ø –±—É–¥—É —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –∏ –Ω–∞–ø–æ–º–Ω—é –æ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö. üòâ",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω".
    /// </summary>
    private async Task HandlePlanEdit(VibesUser user, long chatId, CancellationToken cancellationToken)
    {
        logger.LogInformation("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {UserId} —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω.", user.Id);

        // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é LLM),
        // –Ω–æ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω.

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        user.State = ConversationState.AwaitingSchedulePhoto;
        await databaseService.UpdateUserAsync(user);

        await botClient.SendMessage(
            chatId: chatId,
            text: "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º. –ù–∞–ø–∏—à–∏, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.",
            cancellationToken: cancellationToken);
    }

    public async Task StartMorningCheckupAsync(VibesUser user, CancellationToken cancellationToken)
    {
        // --- –ó–ê–ü–ò–°–´–í–ê–ï–ú –í–†–ï–ú–Ø –û–¢–ü–†–ê–í–ö–ò ---
        // –ú—ã –¥–µ–ª–∞–µ–º —ç—Ç–æ *–ø–µ—Ä–µ–¥* –æ—Ç–ø—Ä–∞–≤–∫–æ–π, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è,
        // –º—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã.
        user.LastCheckupSentUtc = DateTime.UtcNow;

        user.State = ConversationState.AwaitingMorningEnergyRating;
        user.ConversationContext = null;
        await databaseService.UpdateUserAsync(user);

        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            new[]
            {
                InlineKeyboardButton.WithCallbackData("1-3 (–ù–∏–∑–∫–∞—è)", "energy_rating_low"), InlineKeyboardButton.WithCallbackData("4-6 (–°—Ä–µ–¥–Ω—è—è)", "energy_rating_medium")
            },
            new[]
            {
                InlineKeyboardButton.WithCallbackData("7-8 (–í—ã—Å–æ–∫–∞—è)", "energy_rating_high"), InlineKeyboardButton.WithCallbackData("9-10 (–°—É–ø–µ—Ä!)", "energy_rating_very_high")
            }
        });

        var personalizedText = $"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {user.FirstName}! –°–∫–∞–Ω —ç–Ω–µ—Ä–≥–∏–∏ ‚Äî –æ—Ç 1 –¥–æ 10: –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å?";

        await botClient.SendMessage(
            chatId: user.TelegramId,
            text: personalizedText,
            replyMarkup: inlineKeyboard,
            cancellationToken: cancellationToken);
    }

    public async Task StartEveningCheckupAsync(VibesUser user, CancellationToken cancellationToken)
    {
        // --- –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ü–ò–°–¨ –í–†–ï–ú–ï–ù–ò –û–¢–ü–†–ê–í–ö–ò ---
        user.LastEveningCheckupSentUtc = DateTime.UtcNow;
        await databaseService.UpdateUserAsync(user);
        
        // 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (–ø–æ UTC)
        var eventsToday = await calendarService.GetEventsForDateAsync(user, DateTime.UtcNow);

        if (eventsToday == null || eventsToday.Count == 0)
        {
            // –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ –±—ã–ª–æ, –ø—Ä–æ–≤–æ–¥–∏–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —á–µ–∫–∞–ø.
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
            user.State = ConversationState.AwaitingEveningEnergyRating;
            await databaseService.UpdateUserAsync(user);

            await botClient.SendMessage(
                chatId: user.TelegramId,
                text: "–ü–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ –±—ã–ª–æ —Å–æ–±—ã—Ç–∏–π. –ö–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å –≤ —Ü–µ–ª–æ–º? –û—Ü–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é –æ—Ç 1 –¥–æ 10.",
                cancellationToken: cancellationToken);
            return;
        }

        // 2. –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏—è –±—ã–ª–∏, –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏—Ö –æ—Ü–µ–Ω–∫–∏
        user.State = ConversationState.AwaitingEventRating;

        // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        // –≠—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–≥–∞—Ç—å Google API –∑–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.
        var eventSummaries = eventsToday.ToDictionary(e => e.Id, e => e.Summary);
        user.ConversationContext = JsonSerializer.Serialize(eventSummaries);
        await databaseService.UpdateUserAsync(user);

        // 4. –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        var firstEvent = eventsToday.First();
        var keyboard = new InlineKeyboardMarkup(
            InlineKeyboardButton.WithCallbackData("‚ö°Ô∏è –ó–∞—Ä—è–∂–∞–µ—Ç", $"rate_event_{firstEvent.Id}_Energize"),
            InlineKeyboardButton.WithCallbackData("üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", $"rate_event_{firstEvent.Id}_Neutral"),
            InlineKeyboardButton.WithCallbackData("ü™´ –£—Ç–æ–º–ª—è–µ—Ç", $"rate_event_{firstEvent.Id}_Drain")
        );

        await botClient.SendMessage(
            chatId: user.TelegramId,
            text: $"–î–∞–≤–∞–π –ø–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥–∏ –¥–Ω—è. –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏—à—å —Å–æ–±—ã—Ç–∏–µ \"{firstEvent.Summary}\"?",
            replyMarkup: keyboard,
            cancellationToken: cancellationToken);
    }

    private async Task HandleConnectCalendarCommand(VibesUser user, long chatId, CancellationToken cancellationToken)
    {
        var authUrl = calendarService.GenerateAuthUrl(user.TelegramId);

        var inlineKeyboard = new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl(
            text: "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Google Calendar",
            url: authUrl
        ));

        await botClient.SendMessage(
            chatId: chatId,
            text: "–ß—Ç–æ–±—ã —è –º–æ–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É Google –ö–∞–ª–µ–Ω–¥–∞—Ä—é.",
            replyMarkup: inlineKeyboard,
            cancellationToken: cancellationToken);
    }
    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar.
    /// </summary>
    private async Task HandleCheckCalendarCommand(VibesUser user, long chatId, CancellationToken cancellationToken)
    {
        // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
        if (!user.IsGoogleCalendarConnected)
        {
            await botClient.SendMessage(
                chatId: chatId,
                text: "–í–∞—à Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect_calendar.",
                cancellationToken: cancellationToken);
            return;
        }

        // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É.
        await botClient.SendMessage(
            chatId: chatId,
            text: "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...",
            cancellationToken: cancellationToken);

        try
        {
            // –®–∞–≥ 3: –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 10 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.
            var events = await calendarService.GetUpcomingEvents(user, 10);

            // –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç.
            if (events is null || events.Count == 0)
            {
                await botClient.SendMessage(chatId, "‚úÖ –í –≤–∞—à–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.", cancellationToken: cancellationToken);
                return;
            }

            // –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é StringBuilder –∏ Markdown.
            var responseBuilder = new System.Text.StringBuilder("–í–æ—Ç –≤–∞—à–∏ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n");
            foreach (var calendarEvent in events)
            {
                // Google API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ª–∏–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –ª–∏–±–æ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–¥–ª—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å).
                var eventTime = calendarEvent.Start.DateTimeDateTimeOffset.HasValue
                    ? calendarEvent.Start.DateTimeDateTimeOffset.Value.ToLocalTime().ToString("g") // –§–æ—Ä–º–∞—Ç "24.08.2025 14:30"
                    : calendarEvent.Start.Date; // –§–æ—Ä–º–∞—Ç "2025-08-24"

                responseBuilder.AppendLine($"üóìÔ∏è *{calendarEvent.Summary}*");
                responseBuilder.AppendLine($"   - –ù–∞—á–∞–ª–æ: `{eventTime}`");
                responseBuilder.AppendLine(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
            }

            // –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            await SendFormattedMessageAsync(chatId,
                responseBuilder.ToString(),
                replyMarkup: new InlineKeyboardMarkup(),
                cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            // –®–∞–≥ 7: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω).
            logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ Google Calendar –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
            await botClient.SendMessage(chatId,
                """
                ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
                 –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /connect_calendar.
                """,
                cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. User Story #11.
    /// </summary>
    private async Task HandlePhotoMessage(VibesUser user, Message message, CancellationToken cancellationToken)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –±–æ—Ç —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –Ω–µ—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        if (user.State != ConversationState.AwaitingSchedulePhoto)
        {
            await botClient.SendMessage(
                chatId: message.Chat.Id,
                text: "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å–æ—Å—Ç–∞–≤–∏–ª –ø–æ –Ω–µ–º—É –ø–ª–∞–Ω, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /plan.",
                cancellationToken: cancellationToken);
            return;
        }

        await botClient.SendMessage(
            chatId: message.Chat.Id,
            text: "–ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ! –û—Ç–ø—Ä–∞–≤–∏–ª –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ... ü§ñ",
            cancellationToken: cancellationToken);

        try
        {
            // 1. –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ) –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ FileId
            var fileId = message.Photo!.Last().FileId;

            // 2. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram –≤ –≤–∏–¥–µ –ø–æ—Ç–æ–∫–∞
            await using var memoryStream = new MemoryStream();
            var file = await botClient.GetFile(fileId, cancellationToken);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ FilePath –Ω–µ null
            if (file.FilePath is null)
            {
                throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç Telegram.");
            }

            await botClient.DownloadFile(file.FilePath, memoryStream, cancellationToken);
            memoryStream.Position = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Ç–æ–∫–∞ –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è —á—Ç–µ–Ω–∏—è

            // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫ –≤ –Ω–∞—à LlmService
            var recognizedText = await llmService.RecognizeScheduleFromImageAsync(memoryStream);

            string responseToUser;

            if (recognizedText.StartsWith("[ERROR]"))
            {
                // LLM –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ–∂–ª–∏–≤—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç
                logger.LogWarning("LLM –≤–µ—Ä–Ω—É–ª–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {Error}", recognizedText);

                responseToUser = recognizedText.Contains("–ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ")
                    ? "–ü–æ—Ö–æ–∂–µ, –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–µ–ª."
                    : "–Ø –≤–∏–∂—É –Ω–∞ —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç, –Ω–æ –æ–Ω –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.";
            }
            else
            {
                // –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                responseToUser = $"–í–æ—Ç —á—Ç–æ —è —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å:\n\n{recognizedText}\n\n" +
                                 "–ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞? –ú–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.";
            }

            await botClient.SendMessage(message.Chat.Id, responseToUser, cancellationToken: cancellationToken);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}", user.Id);
            await botClient.SendMessage(message.Chat.Id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", cancellationToken: cancellationToken);
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /plan. User Story –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "5) –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫".
    /// </summary>
    private async Task HandlePlanCommand(VibesUser user, long chatId, CancellationToken cancellationToken)
    {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        user.State = ConversationState.AwaitingSchedulePhoto; // –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏ –¥–ª—è —Ñ–æ—Ç–æ, –∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        await databaseService.UpdateUserAsync(user);

        await botClient.SendMessage(
            chatId: chatId,
            text: "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏ 1‚Äì3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Äî —Å–æ–±–µ—Ä—É –ø–ª–∞–Ω.",
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /energy. User Story –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "5) –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫".
    /// </summary>
    private async Task HandleEnergyCommand(VibesUser user, long chatId, CancellationToken cancellationToken)
    {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
        user.State = ConversationState.AwaitingMorningEnergyRating; // –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
        await databaseService.UpdateUserAsync(user);

        // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        var inlineKeyboard = new InlineKeyboardMarkup(new[]
        {
            // –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
            new[]
            {
                InlineKeyboardButton.WithCallbackData("1-3 (–ù–∏–∑–∫–∞—è)", "energy_rating_low"), InlineKeyboardButton.WithCallbackData("4-6 (–°—Ä–µ–¥–Ω—è—è)", "energy_rating_medium"),
            },
            // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
            new[]
            {
                InlineKeyboardButton.WithCallbackData("7-8 (–í—ã—Å–æ–∫–∞—è)", "energy_rating_high"), InlineKeyboardButton.WithCallbackData("9-10 (–°—É–ø–µ—Ä!)", "energy_rating_very_high"),
            }
        });

        await botClient.SendMessage(
            chatId: chatId,
            text: "–ë—ã—Å—Ç—Ä—ã–π —á–µ–∫: –∫–∞–∫ —Ç—ã —Å–µ–π—á–∞—Å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10?",
            replyMarkup: inlineKeyboard,
            cancellationToken: cancellationToken);
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    /// </summary>
    public Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, HandleErrorSource source, CancellationToken cancellationToken)
    {
        var errorMessage = exception switch
        {
            ApiRequestException apiRequestException => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
            _ => exception.ToString()
        };

        logger.LogError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏—Å—Ç–æ—á–Ω–∏–∫: {Source}):\n{ErrorMessage}", source, errorMessage);

        // –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é
        if (exception is RequestException)
        {
            return Task.Delay(TimeSpan.FromSeconds(2), cancellationToken);
        }

        return Task.CompletedTask;
    }

    /// –ù–∞–¥–µ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π.
    /// –ï—Å–ª–∏ Telegram –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
    /// </summary>
    private async Task SendFormattedMessageAsync(long chatId, string text, ReplyMarkup? replyMarkup, CancellationToken cancellationToken)
    {
        try
        {
            // –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown
            await botClient.SendMessage(
                chatId: chatId,
                text: text,
                parseMode: ParseMode.Markdown,
                replyMarkup: replyMarkup,
                cancellationToken: cancellationToken);
        }
        catch (ApiRequestException ex) when (ex.Message.Contains("can't parse entities"))
        {
            // –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ2: –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            logger.LogWarning(ex, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π. –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç: {Text}", text);

            await botClient.SendMessage(
                chatId: chatId,
                text: text, // –¢–æ—Ç –∂–µ —Å–∞–º—ã–π —Ç–µ–∫—Å—Ç
                parseMode: ParseMode.None, // <-- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ë–ï–ó —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                replyMarkup: replyMarkup,
                cancellationToken: cancellationToken);
        }
        // –î—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é) –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ –ø–æ —Å—Ç–µ–∫—É –≤—ã–∑–æ–≤–æ–≤.
    }

    private async Task HandleDefaultMessageAsync(VibesUser user, Message message, CancellationToken cancellationToken)
    {
        if (message.Text is null) return;

        // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ LLM –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        var intent = await llmService.ClassifyUserIntentAsync(message.Text);

        // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        switch (intent)
        {
            case UserIntent.Plan:
                logger.LogInformation("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: Plan");
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                await HandlePlanCommand(user, message.Chat.Id, cancellationToken);
                break;

            case UserIntent.SetEnergy:
                logger.LogInformation("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: SetEnergy");
                // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –æ—Ü–µ–Ω–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
                await HandleEnergyCommand(user, message.Chat.Id, cancellationToken);
                break;

            case UserIntent.CheckCalendar:
                logger.LogInformation("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: CheckCalendar");
                await HandleCheckCalendarCommand(user, message.Chat.Id, cancellationToken);
                break;

            case UserIntent.ActivateCalendar:
                logger.LogInformation("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: ActivateCalendar");
                await HandleConnectCalendarCommand(user, message.Chat.Id, cancellationToken);
                break;

            case UserIntent.GeneralChat:
                logger.LogInformation("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: GeneralChat");
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ–±—â–µ–π –±–æ–ª—Ç–æ–≤–Ω–∏
                await botClient.SendMessage(message.Chat.Id, "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —ç–Ω–µ—Ä–≥–∏–µ–π. –î–∞–≤–∞–π—Ç–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–º—Å—è –Ω–∞ —ç—Ç–æ–º!", cancellationToken: cancellationToken);
                break;

            default: // Unknown
                logger.LogInformation("–ù–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ.");
                await botClient.SendMessage(
                    chatId: message.Chat.Id,
                    text: "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –≤ –≤–∏–¥—É. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏–ª–∏ –æ—Ü–µ–Ω–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é.",
                    cancellationToken: cancellationToken);
                break;
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram.
    /// </summary>
    private Task UnknownUpdateHandlerAsync(Update update)
    {
        logger.LogInformation("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {UpdateType}", update.Type);
        return Task.CompletedTask;
    }
}